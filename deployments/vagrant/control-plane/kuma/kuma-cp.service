[Unit]
Description=Kuma Control Plane in Universal mode
After=network.target
Documentation=https://kuma.io

[Service]
Environment=KUMA_DATAPLANE_TOKEN_SERVER_PUBLIC_ENABLED=true
Environment=KUMA_DATAPLANE_TOKEN_SERVER_PUBLIC_INTERFACE=0.0.0.0
Environment=KUMA_DATAPLANE_TOKEN_SERVER_PUBLIC_PORT=5684
Environment=KUMA_DATAPLANE_TOKEN_SERVER_PUBLIC_TLS_CERT_FILE=/vagrant/.vagrant.data/control-plane/var/secrets/kuma.io/kuma-cp/tls/server.crt
Environment=KUMA_DATAPLANE_TOKEN_SERVER_PUBLIC_TLS_KEY_FILE=/vagrant/.vagrant.data/control-plane/var/secrets/kuma.io/kuma-cp/tls/server.key
ExecStart=/opt/kuma/bin/kuma-cp run
Restart=always
RestartSec=1s
# disable rate limiting on start attempts
StartLimitIntervalSec=0
StartLimitBurst=0
User=vagrant
# if you need your Control Plane to be able to handle a non-trivial number of concurrent connections
# (a total of both incoming and outgoing connections), you need to set proper resource limits on
# the `kuma-cp` process, especially maximum number of open files.
#
# it happens that `systemd` units are not affected by the traditional `ulimit` configuration,
# and you must set resource limits as part of `systemd` unit itself.
#
# to check effective resource limits set on a running `kuma-dp` instance, execute
#
#   $ cat /proc/`pgrep kuma-cp`/limits
#
#   Limit                     Soft Limit           Hard Limit           Units
#   ...
#   Max open files            1024                 4096                 files
#   ...
#
# for Kuma demo setup, we chose the same limit as `docker` and `containerd` set by default.
# See https://github.com/containerd/containerd/issues/3201
LimitNOFILE=1048576

[Install]
WantedBy=multi-user.target
