[Unit]
Description=Kuma dataplane deployed next to the "redis" service.
After=network.target
Documentation=https://kuma.io

[Service]
Environment=KUMA_CONTROL_PLANE_URL=https://kuma-cp:5678
Environment=KUMA_DATAPLANE_RUNTIME_RESOURCE_PATH=/etc/systemd/system/dataplane.yaml
Environment=KUMA_DATAPLANE_RUNTIME_TOKEN_PATH=/vagrant/.vagrant.data/redis/var/secrets/kuma.io/kuma-dp/token
Environment=KUMA_DATAPLANE_ADMIN_PORT=9901
ExecStart=/opt/kuma/bin/kuma-dp run
Restart=always
RestartSec=1s
# disable rate limiting on start attempts
StartLimitIntervalSec=0
StartLimitBurst=0
User=vagrant
# if you need your dataplane to be able to handle a non-trivial number of concurrent connections
# (a total of both incoming and outgoing connections), you need to set proper resource limits on
# the `kuma-dp` process, especially maximum number of open files.
#
# it happens that `systemd` units are not affected by the traditional `ulimit` configuration,
# and you must set resource limits as part of `systemd` unit itself.
#
# to check effective resource limits set on a running `kuma-dp` instance, execute
#
#   $ cat /proc/`pgrep kuma-dp`/limits
#
#   Limit                     Soft Limit           Hard Limit           Units
#   ...
#   Max open files            1024                 4096                 files
#   ...
#
# for Kuma demo setup, we chose the same limit as `docker` and `containerd` set by default.
# See https://github.com/containerd/containerd/issues/3201
LimitNOFILE=1048576

[Install]
WantedBy=multi-user.target
