# -*- mode: ruby -*-
# vi: set ft=ruby :

KUMA_VERSION = "1.0.3"
KUMA_HOME    = "/opt/kuma"

KUMA_CONTROL_PLANE_IP      = "192.168.33.10"
FRONTEND_IP                = "192.168.33.20"
BACKEND_IP                 = "192.168.33.30"
BACKEND_V1_IP              = "192.168.33.40"
POSTGRESQL_IP              = "192.168.33.50"
REDIS_IP                   = "192.168.33.60"
KONG_IP                    = "192.168.33.70"
METRICS_IP                 = "192.168.33.80"

Vagrant.configure("2") do |config|

  config.vm.provider "virtualbox" do |v|
    v.memory = 256
    v.cpus = 1
  end

  config.vm.define "kuma-control-plane" do |node|
    node.vm.box = "ubuntu/bionic64"
    node.vm.hostname = "kuma-cp"
    node.vm.network :private_network, ip: KUMA_CONTROL_PLANE_IP
    node.vm.provision "update_etc_hosts", type: "shell", path: "common/update_etc_hosts.sh", env: { "KUMA_CONTROL_PLANE_IP" => KUMA_CONTROL_PLANE_IP }
    node.vm.provision "download_kuma", type: "shell", path: "common/download_kuma.sh", env: {"KUMA_VERSION" => KUMA_VERSION, "KUMA_HOME" => KUMA_HOME }
    node.vm.provision "create_tls_cert", type: "shell", path: "control-plane/kuma/create_tls_cert.sh"
    node.vm.provision "install_kuma-cp", type: "shell", path: "control-plane/kuma/install_kuma-cp.sh"
    node.vm.provision "await_kuma-cp", type: "shell", path: "common/await_service.sh", env: {"SERVICE_URL" => "http://localhost:5681"}, privileged: false, run: "always"
    node.vm.provision "create_dp_tokens", type: "shell", path: "control-plane/kuma/create_dp_tokens.sh", run: "always"
  end

  config.vm.define "redis" do |node|
    node.vm.box = "ubuntu/bionic64"
    node.vm.hostname = "redis"
    node.vm.network :private_network, ip: REDIS_IP
    node.vm.provision "update_etc_hosts", type: "shell", path: "common/update_etc_hosts.sh", env: { "KUMA_CONTROL_PLANE_IP" => KUMA_CONTROL_PLANE_IP }
    node.vm.provision "install_redis", type: "shell", path: "redis/app/install.sh"
    node.vm.provision "download_kuma", type: "shell", path: "common/download_kuma.sh", env: {"KUMA_VERSION" => KUMA_VERSION, "KUMA_HOME" => KUMA_HOME }
    node.vm.provision "configure_kumactl", type: "shell", path: "common/configure_kumactl.sh"
    node.vm.provision "install_kuma-dp", type: "shell", path: "common/install_kuma-dp.sh", env: {"KUMA_DP_UNIT_FILE" => "/vagrant/redis/kuma/kuma-dp.service", "KUMA_DATAPLANE_FILE" => "/vagrant/redis/kuma/dataplane.yaml", "KUMA_DATAPLANE_IP" => REDIS_IP}, run: "always"
    node.vm.provision "await_kuma-dp", type: "shell", path: "common/await_service.sh", env: {"SERVICE_URL" => "http://localhost:9901/ready"}, privileged: false, run: "always"
  end

  config.vm.define "postgresql" do |node|
    node.vm.synced_folder "../api/db/postgresql", "/home/vagrant/kuma-demo/postgresql"
    node.vm.box = "ubuntu/bionic64"
    node.vm.hostname = "postgresql"
    node.vm.network :private_network, ip: POSTGRESQL_IP
    node.vm.provision "update_etc_hosts", type: "shell", path: "common/update_etc_hosts.sh", env: { "KUMA_CONTROL_PLANE_IP" => KUMA_CONTROL_PLANE_IP }
    node.vm.provision "install_postgresql", type: "shell", path: "postgresql/app/install.sh"
    node.vm.provision "start_postgresql", type: "shell", path: "postgresql/app/start.sh", run: "always"
    node.vm.provision "download_kuma", type: "shell", path: "common/download_kuma.sh", env: {"KUMA_VERSION" => KUMA_VERSION, "KUMA_HOME" => KUMA_HOME }
    node.vm.provision "configure_kumactl", type: "shell", path: "common/configure_kumactl.sh"
    node.vm.provision "install_kuma-dp", type: "shell", path: "common/install_kuma-dp.sh", env: {"KUMA_DP_UNIT_FILE" => "/vagrant/postgresql/kuma/kuma-dp.service", "KUMA_DATAPLANE_FILE" => "/vagrant/postgresql/kuma/dataplane.yaml", "KUMA_DATAPLANE_IP" => POSTGRESQL_IP}, run: "always"
    node.vm.provision "await_kuma-dp", type: "shell", path: "common/await_service.sh", env: {"SERVICE_URL" => "http://localhost:9901/ready"}, privileged: false, run: "always"
  end

  config.vm.define "metrics" do |node|
    node.vm.box = "ubuntu/bionic64"
    node.vm.provider "virtualbox" do |v|
      v.memory = 1024
    end
    node.vm.hostname = "metrics"
    node.vm.network :private_network, ip: METRICS_IP
    node.vm.provision "user_prometheus", type: "shell", inline: "id -u prometheus >/dev/null 2>&1 || useradd -M -r -s /bin/false prometheus"
    node.vm.provision "update_etc_hosts", type: "shell", path: "common/update_etc_hosts.sh", env: { "KUMA_CONTROL_PLANE_IP" => KUMA_CONTROL_PLANE_IP }
    node.vm.provision "download_kuma", type: "shell", path: "common/download_kuma.sh", env: {"KUMA_VERSION" => KUMA_VERSION, "KUMA_HOME" => KUMA_HOME }
    node.vm.provision "install_kuma-prometheus-sd", type: "shell", path: "metrics/kuma/install-kuma-prometheus-sd.sh"
    node.vm.provision "install_prometheus", type: "shell", path: "metrics/app/prometheus/install.sh", env: {"PROMETHEUS_VERSION": "2.15.2"}
    node.vm.provision "install_grafana", type: "shell", path: "metrics/app/grafana/install.sh"
  end

  config.vm.define "backend" do |node|
    node.vm.synced_folder "../api", "/home/vagrant/kuma-demo/backend"
    node.vm.box = "ubuntu/bionic64"
    node.vm.hostname = "backend"
    node.vm.network :private_network, ip: BACKEND_IP
    node.vm.provision "update_etc_hosts", type: "shell", path: "common/update_etc_hosts.sh", env: { "KUMA_CONTROL_PLANE_IP" => KUMA_CONTROL_PLANE_IP }
    node.vm.provision "install_backend", type: "shell", path: "backend/app/install.sh"
    node.vm.provision "start_backend", type: "shell", path: "backend/app/start.sh", privileged: false, run: "always"
    node.vm.provision "await_backend", type: "shell", path: "common/await_service.sh", env: {"SERVICE_URL" => "http://localhost:3001"}, privileged: false, run: "always"
    node.vm.provision "download_kuma", type: "shell", path: "common/download_kuma.sh", env: {"KUMA_VERSION" => KUMA_VERSION, "KUMA_HOME" => KUMA_HOME }
    node.vm.provision "configure_kumactl", type: "shell", path: "common/configure_kumactl.sh"
    node.vm.provision "install_kuma-dp", type: "shell", path: "common/install_kuma-dp.sh", env: {"KUMA_DP_UNIT_FILE" => "/vagrant/backend/kuma/kuma-dp.service", "KUMA_DATAPLANE_FILE" => "/vagrant/backend/kuma/dataplane.yaml", "KUMA_DATAPLANE_IP" => BACKEND_IP}, run: "always"
    node.vm.provision "await_kuma-dp", type: "shell", path: "common/await_service.sh", env: {"SERVICE_URL" => "http://localhost:9901/ready"}, privileged: false, run: "always"
  end

  config.vm.define "backend-v1" do |node|
    node.vm.synced_folder "../api", "/home/vagrant/kuma-demo/backend-v1"
    node.vm.box = "ubuntu/bionic64"
    node.vm.hostname = "backend-v1"
    node.vm.network :private_network, ip: BACKEND_V1_IP
    node.vm.provision "update_etc_hosts", type: "shell", path: "common/update_etc_hosts.sh", env: { "KUMA_CONTROL_PLANE_IP" => KUMA_CONTROL_PLANE_IP }
    node.vm.provision "install_backend", type: "shell", path: "backend-v1/app/install.sh"
    node.vm.provision "start_backend", type: "shell", path: "backend-v1/app/start.sh", privileged: false, run: "always"
    node.vm.provision "await_backend", type: "shell", path: "common/await_service.sh", env: {"SERVICE_URL" => "http://localhost:3001"}, privileged: false, run: "always"
    node.vm.provision "download_kuma", type: "shell", path: "common/download_kuma.sh", env: {"KUMA_VERSION" => KUMA_VERSION, "KUMA_HOME" => KUMA_HOME }
    node.vm.provision "configure_kumactl", type: "shell", path: "common/configure_kumactl.sh"
    node.vm.provision "install_kuma-dp", type: "shell", path: "common/install_kuma-dp.sh", env: {"KUMA_DP_UNIT_FILE" => "/vagrant/backend-v1/kuma/kuma-dp.service", "KUMA_DATAPLANE_FILE" => "/vagrant/backend-v1/kuma/dataplane.yaml", "KUMA_DATAPLANE_IP" => BACKEND_V1_IP}, run: "always"
    node.vm.provision "await_kuma-dp", type: "shell", path: "common/await_service.sh", env: {"SERVICE_URL" => "http://localhost:9901/ready"}, privileged: false, run: "always"
  end
  
  config.vm.define "frontend" do |node|
    node.vm.synced_folder "../app", "/home/vagrant/kuma-demo/frontend"
    node.vm.box = "ubuntu/bionic64"
    node.vm.hostname = "frontend"
    node.vm.network :private_network, ip: FRONTEND_IP
    node.vm.provision "update_etc_hosts", type: "shell", path: "common/update_etc_hosts.sh", env: { "KUMA_CONTROL_PLANE_IP" => KUMA_CONTROL_PLANE_IP }
    node.vm.provision "install_frontend", type: "shell", path: "frontend/app/install.sh"
    node.vm.provision "start_frontend", type: "shell", path: "frontend/app/start.sh", privileged: false, run: "always"
    node.vm.provision "download_kuma", type: "shell", path: "common/download_kuma.sh", env: {"KUMA_VERSION" => KUMA_VERSION, "KUMA_HOME" => KUMA_HOME }
    node.vm.provision "configure_kumactl", type: "shell", path: "common/configure_kumactl.sh"
    node.vm.provision "install_kuma-dp", type: "shell", path: "common/install_kuma-dp.sh", env: {"KUMA_DP_UNIT_FILE" => "/vagrant/frontend/kuma/kuma-dp.service", "KUMA_DATAPLANE_FILE" => "/vagrant/frontend/kuma/dataplane.yaml", "KUMA_DATAPLANE_IP" => FRONTEND_IP}, run: "always"
    node.vm.provision "await_kuma-dp", type: "shell", path: "common/await_service.sh", env: {"SERVICE_URL" => "http://localhost:9901/ready"}, privileged: false, run: "always"
    node.vm.provision "upload_data", type: "shell", path: "frontend/app/upload_data.sh", privileged: false, run: "always"
  end

  config.vm.define "kong" do |node|
    node.vm.box = "ubuntu/bionic64"
    node.vm.provider "virtualbox" do |v|
      v.memory = 512
    end
    node.vm.hostname = "kong"
    node.vm.network :private_network, ip: KONG_IP
    node.vm.provision "update_etc_hosts", type: "shell", path: "common/update_etc_hosts.sh", env: { "KUMA_CONTROL_PLANE_IP" => KUMA_CONTROL_PLANE_IP }
    node.vm.provision "install_kong", type: "shell", path: "kong/app/install.sh"
    node.vm.provision "start_kong", type: "shell", path: "kong/app/start.sh", run: "always"
    node.vm.provision "download_kuma", type: "shell", path: "common/download_kuma.sh", env: {"KUMA_VERSION" => KUMA_VERSION, "KUMA_HOME" => KUMA_HOME }
    node.vm.provision "configure_kumactl", type: "shell", path: "common/configure_kumactl.sh"
    node.vm.provision "install_kuma-dp", type: "shell", path: "common/install_kuma-dp.sh", env: {"KUMA_DP_UNIT_FILE" => "/vagrant/kong/kuma/kuma-dp.service", "KUMA_DATAPLANE_FILE" => "/vagrant/kong/kuma/dataplane.yaml", "KUMA_DATAPLANE_IP" => KONG_IP}, run: "always"
  end

end
